- untuk agar lombok tidak error pada saat project dijalankan, maka pada pom.xml terbaru dari maven
di annotationProcessorPaths ditambahkan
<version>${lombok.version}</version>

google: annotationProcessorPaths lombok intellij
https://intellij-support.jetbrains.com/hc/en-us/community/posts/23064675521682-Lombok-not-workin-with-Intellij

dari:
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <configuration>
        <annotationProcessorPaths>
            <path>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                // tambah disini
            </path>
        </annotationProcessorPaths>
    </configuration>
</plugin>

ke:
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <configuration>
        <annotationProcessorPaths>
            <path>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version> // yang ditambahkan ini
            </path>
        </annotationProcessorPaths>
    </configuration>
</plugin>

- kemungkinan tasknya:
1. edit data tidak ke grab waktu edit
2. delete tidak bekerja
3. docker-compose dan dockerfile tidak ada untuk infra
atau untuk menjalankan aplikasi secara docker / container


buat simulasi dari ini, kan kamu punya 2 akun github
coba aja.
(ini dari README.md)
1. Fork the repository
2. Create a new branch
3. Commit your changes
4. Submit a pull request

buat aplikasi personal finance tracker

1fddb07 (HEAD -> main, origin/main, origin/HEAD) feat(post): add thymelead template
5661a81 fix(post): fix error set createdAt, updatedAt and path variable id
a4815e0 docs(readme): update documentation
d11caca infra(docker): add docker compose
fcf5044 feat(posts): add post resources
3855158 feat(setup): Initialize setup projects
ab0a42b feat(article): custom output response
02dc89e feat(article): add resource api example article
58a25e4 docs(readme): add readme markdown
66da0e5 (feat: setup): initialize projects

(feat: setup): initialize projects
docs(readme): add readme markdown
feat(article): add resource api example article
feat(article): custom output response
feat(setup): Initialize setup projects
feat(posts): add post resources
infra(docker): add docker compose
docs(readme): update documentation
fix(post): fix error set createdAt, updatedAt and path variable id
feat(post): add thymelead template

ini namanya git flow, coba cari tau
apa aja yang masuk ke dalam git flow,

nanti jangan lupa coba simulasi PR
kan punya 2 akun github?

jangan lupa simulasi


- merubah username dan password postgresql database dengan
user database sendiri pada application.properties
- Optimize imports
- replace with single class import


kenapa kalau saya debug
saya tempatkan breakpoint di restclient (resttemplate) dan di restapi
di restapinya breakpointnya tidak ke trigger ya
tetapi jika di resttemplate tidak saya pasang breakpoint
maka di rest api nya akan berhenti atau ke trigger breakpointnya

ini kenapa post nya datanya null ya,
Post post = restTemplate.getForObject(API_BASE_URL + "/" + id, Post.class);

dari sini, public class PostControllerView
@GetMapping("/edit/{id}")
public String showEditForm(@PathVariable Long id, Model model) {
    Post post = restTemplate.getForObject(API_BASE_URL + "/" + id, Post.class);
    model.addAttribute("post", post);
    return "post-form";
}

padahal waktu saya debug di rest api nya datanya ada,
dari sini, public class PostPresenter
@GetMapping("/{id}")
public Map<String, Object> getPostById(@PathVariable Long id) {
    Map<String, Object> response = new HashMap<>();
    response.put("status", "success");
    response.put("data", postService.findPostById(id));
    return response;
}


maksud saya ApiResponseHelper nya digunakan di class PostControllerView,
bisa edit ini tidak agar bisa menerima List<Post> atau Post

package com.spring.finshot.utils;

import java.util.List;

public class ApiResponseHelper<T> {
    private String status;
    private List<T> data;

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public List<T> getData() {
        return data;
    }

    public void setData(List<T> data) {
        this.data = data;
    }
}

kenapa sebelumnya ini tidak perlu ObjectMapper ya untuk yang List<Post>,
// class PostControllerView
ApiResponseHelper<Post> response = restTemplate.getForObject(API_BASE_URL, ApiResponseHelper.class);

// class PostPresenter
@GetMapping
public Map<String, Object> getAllPosts() {
    Map<String, Object> response = new HashMap<>();
    response.put("status", "success");
    response.put("data", postService.findAllActivePosts());
    return response;
}

// class PostServiceImpl implements PostService
@Override
public List<Post> findAllActivePosts() {
    return postRepository.findAllActivePosts();
}

// class PostControllerView
@GetMapping
public String listPosts(Model model) {
    ApiResponseHelper<Post> response = restTemplate.getForObject(API_BASE_URL, ApiResponseHelper.class);
    model.addAttribute("posts", response.getData());
    return "post-list";
}


// class ApiResponseHelper<T>
import java.util.List;
public class ApiResponseHelper<T> {
    private String status;
    private List<T> data;

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public List<T> getData() {
        return data;
    }

    public void setData(List<T> data) {
        this.data = data;
    }
}


bisa gak untuk yang Post tidak pakai ObjectMapper juga
// class PostControllerView
@GetMapping("/edit/{id}")
public String showEditForm(@PathVariable Long id, Model model) {
    Post post = restTemplate.getForObject(API_BASE_URL + "/" + id, Post.class); // yang ini
    model.addAttribute("post", post);
    return "post-form";
}


baik tolong ubah class ApiResponseHelper agar bisa memproses getForObject dari List<Post> ataupun single object Post

// ubah ini ya, agar bisa memproses List<Post> ataupun single object Post

import java.util.List;
public class ApiResponseHelper<T> {
    private String status;
    private List<T> data;

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public List<T> getData() {
        return data;
    }

    public void setData(List<T> data) {
        this.data = data;
    }
}

// pada class PostControllerView
@GetMapping
public String listPosts(Model model) {
    ApiResponseHelper<Post> response = restTemplate.getForObject(API_BASE_URL, ApiResponseHelper.class);
    model.addAttribute("posts", response.getData());
    return "post-list";
}

@GetMapping("/edit/{id}")
public String showEditForm(@PathVariable Long id, Model model) {
    Post post = restTemplate.getForObject(API_BASE_URL + "/" + id, Post.class); // yang ini ya
    model.addAttribute("post", post);
    return "post-form";
}

kalau yang singgle Post kenapa error di post-form.html nya ya,
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Post Form</title>
    <!-- Tailwind CSS via CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-6">

<h1 th:text="${post.id != null ? 'Edit Post' : 'Create Post'}" class="text-2xl font-bold mb-4"></h1>

<form th:action="@{/posts}" th:object="${post}" method="post" class="bg-white p-6 rounded-lg shadow-md space-y-4">

    <input type="hidden" th:if="${post.id != null}" th:field="*{id}" />

    <div class="flex flex-col">
        <label for="title" class="text-lg font-semibold mb-2">Title</label>
        <input type="text" id="title" th:field="*{title}" class="border-2 border-gray-300 p-2 rounded" />
    </div>

    <div class="flex flex-col">
        <label for="description" class="text-lg font-semibold mb-2">Description</label>
        <textarea id="description" th:field="*{description}" class="border-2 border-gray-300 p-2 rounded"></textarea>
    </div>

    <div class="flex flex-col">
        <label for="content" class="text-lg font-semibold mb-2">Content</label>
        <textarea id="content" th:field="*{content}" class="border-2 border-gray-300 p-2 rounded"></textarea>
    </div>

    <div class="flex flex-col">
        <label for="author" class="text-lg font-semibold mb-2">Author</label>
        <textarea id="author" th:field="*{author}" class="border-2 border-gray-300 p-2 rounded"></textarea>
    </div>

    <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600">Save</button>
</form>

</body>
</html>

olah manual response dari rest api yang bentuknya Map<String, Object>
ke model single Post dengan ObjectMapper

 menambahkan jackson-datatype-jsr310 pada pom.xml
 agar com.spring.finshot.entity.Post["createdAt"]
 Java 8 date/time type java.time.LocalDateTime support
 serialize dan deserialize

 ini error nya:
 com.fasterxml.jackson.databind.exc.InvalidDefinitionException:
 Java 8 date/time type java.time.LocalDateTime
 not supported by default: add Module
 "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling
 at [Source: UNKNOWN; byte offset: #UNKNOWN] (through reference chain: com.spring.finshot.entity.Post["createdAt"])